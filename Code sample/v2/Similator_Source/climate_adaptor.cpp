/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i climate_adaptor.h -a :climate_adaptor.cpp ../Similator_Source/climate.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "climate_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ClimateAdaptor
 */

ClimateAdaptor::ClimateAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ClimateAdaptor::~ClimateAdaptor()
{
    // destructor
}

int ClimateAdaptor::getAuto_mode()
{
    // handle method call local.Climate.getAuto_mode
    int out0;
    QMetaObject::invokeMethod(parent(), "getAuto_mode", Q_RETURN_ARG(int, out0));
    return out0;
}

int ClimateAdaptor::getDriverWind_mode()
{
    // handle method call local.Climate.getDriverWind_mode
    int out0;
    QMetaObject::invokeMethod(parent(), "getDriverWind_mode", Q_RETURN_ARG(int, out0));
    return out0;
}

int ClimateAdaptor::getFan_speed()
{
    // handle method call local.Climate.getFan_speed
    int out0;
    QMetaObject::invokeMethod(parent(), "getFan_speed", Q_RETURN_ARG(int, out0));
    return out0;
}

int ClimateAdaptor::getPassengerWind_mode()
{
    // handle method call local.Climate.getPassengerWind_mode
    int out0;
    QMetaObject::invokeMethod(parent(), "getPassengerWind_mode", Q_RETURN_ARG(int, out0));
    return out0;
}

int ClimateAdaptor::getSync_mode()
{
    // handle method call local.Climate.getSync_mode
    int out0;
    QMetaObject::invokeMethod(parent(), "getSync_mode", Q_RETURN_ARG(int, out0));
    return out0;
}

double ClimateAdaptor::getTemp_driver()
{
    // handle method call local.Climate.getTemp_driver
    double out0;
    QMetaObject::invokeMethod(parent(), "getTemp_driver", Q_RETURN_ARG(double, out0));
    return out0;
}

double ClimateAdaptor::getTemp_passenger()
{
    // handle method call local.Climate.getTemp_passenger
    double out0;
    QMetaObject::invokeMethod(parent(), "getTemp_passenger", Q_RETURN_ARG(double, out0));
    return out0;
}

void ClimateAdaptor::setData(double temp_driver, double temp_passenger, int fan_speed, int driver_wind_mode, int passenger_wind_mode, int auto_mode, int sync_mode)
{
    // handle method call local.Climate.setData
    QMetaObject::invokeMethod(parent(), "setData", Q_ARG(double, temp_driver), Q_ARG(double, temp_passenger), Q_ARG(int, fan_speed), Q_ARG(int, driver_wind_mode), Q_ARG(int, passenger_wind_mode), Q_ARG(int, auto_mode), Q_ARG(int, sync_mode));
}

